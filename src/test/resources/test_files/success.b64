<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:core="http://xbrl.frc.org.uk/fr/2019-01-01/core" xmlns:countries="http://xbrl.frc.org.uk/cd/2019-01-01/countries" xmlns:curr="http://xbrl.frc.org.uk/cd/2019-01-01/currencies" xmlns:direp="http://xbrl.frc.org.uk/reports/2019-01-01/direp" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2013/inlineXBRL" xmlns:ixt2="http://www.xbrl.org/inlineXBRL/transformation/2011-07-31" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:uk-bus="http://xbrl.frc.org.uk/cd/2019-01-01/business" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="en">
  <head>
    <meta content="application/xhtml+xml; charset=UTF-8" http-equiv="content-type" />
    <title> QUICK CLEANING PROFESIONAL LIMITED </title>
    <style type="text/css">
      body {
        font-size: 12px;
      }

      h1 {
        font-size: 2em;
      }

      b,
      strong {
        font-weight: bold;
      }

      table {
        border-spacing: 10px;
      }

      .text--left {
        text-align: left !important;
      }

      .text--center {
        text-align: center !important;
      }

      .text--right {
        text-align: right !important;
      }

      .strong {
        font-weight: bold;
      }

      .center {
        text-align: center;
      }

      .body {
        font-size: 100%;
      }

      h1 {
        font-weight: bold;
        font-size: 16px;
      }

      h2 {
        font-weight: bold;
        font-size: 14px;
      }

      h3 {
        font-weight: bold;
        font-size: 12px;
      }

      p {
        margin-top: 0.3125em;
        margin-bottom: 1.25em;
      }

      p.accounts-upload {
        font-size: 1.3em;
      }

      .accounts-body {
        font-family: 'SourceSansPro-Regular';
      }

      .margin-large {
        margin-top: 4em;
      }

      .margin-xx-large {
        margin-top: 10em;
      }

      .header {
        padding: 5px;
      }

      .text-area-display {
        white-space: pre-line;
      }

      table {
        font-family: 'SourceSansPro-Regular';
        font-size: 12px;
        width: 100%;
        padding-bottom: 15px;
      }

      th {
        font-weight: bold;
        vertical-align: top;
        text-align: left;
      }

      td {
        vertical-align: top;
        text-align: left;
      }

      .table-heading {
        text-align: right;
        font-style: italic
      }

      td.figure,
      td.total,
      td.total-no-top-border,
      td.grandtotal,
      td.total-no-top-border,
      td.grandtotal-no-top-border,
      th.figure {
        vertical-align: middle;
        text-align: right;
        white-space: nowrap;
        width: 14%;
      }

      td.description {
        width: 50%;
      }

      td.total {
        border-top: black solid 1px;
        border-bottom: black solid 1px;
      }

      td.total-no-top-border {
        border-bottom: black solid 1px;
      }

      td.grandtotal-no-top-border {
        border-bottom: black double 3px;
      }

      td.grandtotal {
        border-top: black solid 1px;
        border-bottom: black double 3px;
      }

      td.align-right {
        text-align: right;
      }

      @media print {

        td.figure,
        td.total,
        td.total-no-top-border,
        td.grandtotal,
        td.total-no-top-border,
        td.grandtotal-no-top-border,
        th.figure {
          width: 15%;
        }
      }

      ol,
      ul {
        margin-top: 5px;
        margin-bottom: 20px;
        padding: 0;
      }

      ul,
      ol {
        list-style-type: none;
      }

      ul li {
        margin-bottom: 5px;
      }

      .page-break {
        min-height: 400px;
        page-break-before: always;
      }

      .page {
        min-height: 25cm;
        border-style: solid;
        border-width: 0px;
        page-break-after: always;
        margin: 0 auto;
        width: 170mm;
        position: relative;
      }

      @page {
        size: A4;
      }

      @media print {

        html,
        body {
          height: 257mm;
          margin: 0 auto;
          width: 170mm;
          font-size: 12px;
        }
      }

      @media screen {
        .page {
          margin-bottom: 5em
        }
      }

      .section-marker {
        left: 0;
        position: absolute;
        top: 0;
      }

      .draft .page-break,
      .draft #AccountsHeader {
        zoom: expression(this.runtimeStyle.zoom="1", this.insertBefore(document.createElement("i"), this.firstChild).className="ie-after");
      }

      .draft .page:after,
      .draft .page-break:after,
      .draft #AccountsHeader:after {
        content: "Draft";
        color: #888;
        display: block;
        font-size: 128px;
        left: 50%;
        line-height: 1em;
        margin: -64px 0 0 -210px;
        opacity: 0.5;
        position: absolute;
        text-transform: uppercase;
        top: 50%;
        -moz-transform: rotate(-30deg);
        -webkit-transform: rotate(-30deg);
        -o-transform: rotate(-30deg);
        -ms-transform: rotate(-30deg);
        transform: rotate(-30deg);
        z-index: 5;
      }

      .draft .page .ie-after,
      .draft .page-break .ie-after,
      .draft #AccountsHeader .ie-after {
        color: #888;
        display: block;
        filter: alpha(opacity=50);
        font-size: 128px;
        left: 50%;
        line-height: 1em;
        margin: -64px 0 0 -210px;
        position: absolute;
        text-transform: uppercase;
        top: 50%;
        z-index: 5;
        zoom: expression(this.runtimeStyle.zoom="1", this.innerHTML="DRAFT");
      }

      .table-margin-bottom-spacing {
        margin-bottom: 12px;
      }

      .negative,
      .debit {
        white-space: nowrap;
      }

      * {
        position: relative;
      }
    </style>
  </head>
  <body xml:lang="en">
    <div class="accounts-body ">
      <div class="wholedoc" id="abridgedAccounts">
        <div id="accountsHeaderIxbrl" style="display:none">
          <ix:header>
            <ix:hidden>
              <ix:nonNumeric contextRef="CY" name="uk-bus:NameProductionSoftware">Companies House</ix:nonNumeric>
              <ix:nonNumeric contextRef="CY" name="uk-bus:UKCompaniesHouseRegisteredNumber">12345716</ix:nonNumeric>
              <ix:nonNumeric contextRef="LegalFormEntity_CY" format="ixt2:nocontent" name="uk-bus:LegalFormEntity" />
              <ix:nonNumeric contextRef="AccountingStandards_CY" format="ixt2:nocontent" name="uk-bus:AccountingStandardsApplied" />
              <ix:nonNumeric contextRef="AccountsStatus_CY" format="ixt2:nocontent" name="uk-bus:AccountsStatusAuditedOrUnaudited" />
              <ix:nonNumeric contextRef="AccountsType_CY" format="ixt2:nocontent" name="uk-bus:AccountsTypeFullOrAbbreviated" />
              <ix:nonNumeric contextRef="Director1_CY" format="ixt2:nocontent" name="core:DirectorSigningFinancialStatements" />
              <ix:nonNumeric contextRef="CY_END" name="uk-bus:EndDateForPeriodCoveredByReport">2021-12-31</ix:nonNumeric>
              <ix:nonNumeric contextRef="CY_END" name="uk-bus:BalanceSheetDate">2021-12-31</ix:nonNumeric>
              <ix:nonNumeric contextRef="CY_END" name="uk-bus:StartDateForPeriodCoveredByReport">2021-01-01</ix:nonNumeric>
              <ix:nonNumeric contextRef="CY" format="ixt2:booleanfalse" name="uk-bus:EntityDormantTruefalse">false</ix:nonNumeric>
              <ix:nonNumeric contextRef="CY" format="ixt2:nocontent" name="uk-bus:EntityTradingStatus" />
            </ix:hidden>
            <ix:references>
              <link:schemaRef xlink:href="https://xbrl.frc.org.uk/FRS-102/2019-01-01/FRS-102-2019-01-01.xsd" xlink:type="simple" />
            </ix:references>
            <ix:resources>
              <xbrli:unit id="GBP">
                <xbrli:measure>iso4217:GBP</xbrli:measure>
              </xbrli:unit>
              <xbrli:unit id="pure">
                <xbrli:measure>xbrli:pure</xbrli:measure>
              </xbrli:unit>
              <xbrli:context id="PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CY_Currency_GBP">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="curr:CurrenciesDimension">curr:PoundSterling</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="LegalFormEntity_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:LegalFormEntityDimension">uk-bus:PrivateLimitedCompanyLtd</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="AccountingStandards_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:AccountingStandardsDimension">uk-bus:FRS102</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="AccountsStatus_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:AccountsStatusDimension">uk-bus:AuditExempt-NoAccountantsReport</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="AccountsType_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:AccountsTypeDimension">uk-bus:FullAccounts</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="EntityContactInfo_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityContactTypeDimension">uk-bus:RegisteredOffice</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director1_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director1</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director2_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director2</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director3_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director3</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director4_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director4</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director5_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director5</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director6_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director6</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director7_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director7</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director8_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director8</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director9_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director9</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director10_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director10</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director11_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director11</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director12_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director12</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director13_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director13</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director14_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director14</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director15_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director15</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director16_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director16</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director17_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director17</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director18_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director18</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director19_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director19</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director20_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director20</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Director21_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:Director21</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CompanySecretary1_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="uk-bus:EntityOfficersDimension">uk-bus:CompanySecretary1</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Debtors_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:AfterOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Debtors_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:AfterOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsWithinOneYear_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:WithinOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsWithinOneYear_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:WithinOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsWithinOneYear_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:WithinOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsAfterOneYear_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:AfterOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsAfterOneYear_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:AfterOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="CreditorsAfterOneYear_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:MaturitiesOrExpirationPeriodsDimension">core:AfterOneYear</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="ShareCapital_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:ShareCapital</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="ShareCapital_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:ShareCapital</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="SharePremiumAccount_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:SharePremium</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="SharePremiumAccount_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:SharePremium</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OtherReserves_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:OtherReservesSubtotal</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OtherReserves_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:OtherReservesSubtotal</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="RevaluationReserve_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:RevaluationReserve</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="RevaluationReserve_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:RevaluationReserve</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="RetainedEarningsAccumulatedLosses_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:RetainedEarningsAccumulatedLosses</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="RetainedEarningsAccumulatedLosses_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:EquityClassesDimension">core:RetainedEarningsAccumulatedLosses</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="POST_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:typedMember dimension="core:X-EventAfterReportingDateGroupingDimension">
                      <core:XEventAfterReportingDateGroupingDimension.domain>1</core:XEventAfterReportingDateGroupingDimension.domain>
                    </xbrldi:typedMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="POST2_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:typedMember dimension="core:X-EventAfterReportingDateGroupingDimension">
                      <core:XEventAfterReportingDateGroupingDimension.domain>2</core:XEventAfterReportingDateGroupingDimension.domain>
                    </xbrldi:typedMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="POST3_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:typedMember dimension="core:X-EventAfterReportingDateGroupingDimension">
                      <core:XEventAfterReportingDateGroupingDimension.domain>3</core:XEventAfterReportingDateGroupingDimension.domain>
                    </xbrldi:typedMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="LandAndBuildings_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:LandBuildings</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="LandAndBuildings_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:LandBuildings</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="LandAndBuildings_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:LandBuildings</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="LandAndBuildings_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:LandBuildings</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="PlantMachinery_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:PlantMachinery</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="PlantMachinery_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:PlantMachinery</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="PlantMachinery_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:PlantMachinery</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="PlantMachinery_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:PlantMachinery</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="FurnitureFittingsToolsEquipment_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:FurnitureFittingsToolsEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="FurnitureFittingsToolsEquipment_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:FurnitureFittingsToolsEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="FurnitureFittingsToolsEquipment_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:FurnitureFittingsToolsEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="FurnitureFittingsToolsEquipment_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:FurnitureFittingsToolsEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OfficeEquipment_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:OfficeEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OfficeEquipment_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:OfficeEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OfficeEquipment_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:OfficeEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="OfficeEquipment_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:OfficeEquipment</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Vehicles_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:Vehicles</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Vehicles_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:Vehicles</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Vehicles_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:Vehicles</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="Vehicles_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:PropertyPlantEquipmentClassesDimension">core:Vehicles</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="NetGoodwill_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:NetGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="NetGoodwill_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:NetGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="NetGoodwill_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:NetGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="NetGoodwill_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:NetGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="IntangibleAssetsOtherThanGoodwill_CY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:IntangibleAssetsOtherThanGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2021-01-01</xbrli:startDate>
                  <xbrli:endDate>2021-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="IntangibleAssetsOtherThanGoodwill_CY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:IntangibleAssetsOtherThanGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2021-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="IntangibleAssetsOtherThanGoodwill_PY">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:IntangibleAssetsOtherThanGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:startDate>2019-12-03</xbrli:startDate>
                  <xbrli:endDate>2020-12-31</xbrli:endDate>
                </xbrli:period>
              </xbrli:context>
              <xbrli:context id="IntangibleAssetsOtherThanGoodwill_PY_END">
                <xbrli:entity>
                  <xbrli:identifier scheme="http://www.companieshouse.gov.uk/">12345716</xbrli:identifier>
                  <xbrli:segment>
                    <xbrldi:explicitMember dimension="core:IntangibleAssetClassesDimension">core:IntangibleAssetsOtherThanGoodwill</xbrldi:explicitMember>
                  </xbrli:segment>
                </xbrli:entity>
                <xbrli:period>
                  <xbrli:instant>2020-12-31</xbrli:instant>
                </xbrli:period>
              </xbrli:context>
            </ix:resources>
          </ix:header>
        </div>
        <div class="page margin-xx-large" id="AccountsHeader">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="center margin-large">Company Registration Number: <br />
            <ix:nonNumeric contextRef="CY" name="uk-bus:UKCompaniesHouseRegisteredNumber">12345716</ix:nonNumeric> (England and Wales)
          </h2>
          <h2 class="text--center margin-large">
            <ix:nonNumeric contextRef="CY" name="uk-bus:ReportTitle">Unaudited statutory accounts for the year ended 31 December 2021</ix:nonNumeric>
          </h2>
          <h2 class="text--center margin-large">Period of accounts</h2>
          <h2 class="text--center margin-large">Start date: 1 January 2021</h2>
          <h2 class="text--center">End date: 31 December 2021</h2>
        </div>
        <div class="page" id="Contents">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--center">Contents of the Financial Statements</h2>
          <p class="text--center">
            <strong>for the Period Ended 31 December 2021</strong>
          </p>
          <table cellspacing="10">
            <thead>
              <tr>
                <th />
                <th />
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="strong">
                  <a href="#DirectorsReportSection">Directors report</a>
                </td>
                <td />
              </tr>
              <tr>
                <td class="strong">
                  <a href="#ProfitAndLossSection">Profit and loss</a>
                </td>
                <td />
              </tr>
              <tr>
                <td class="strong">
                  <a href="#BalanceSheetSection">Balance sheet</a>
                </td>
                <td />
              </tr>
              <tr>
                <td class="strong">
                  <a href="#AdditionalNotesSection">Additional notes</a>
                </td>
                <td />
              </tr>
              <tr>
                <td class="strong">
                  <a href="#BalanceSheetNotesSection">Balance sheet notes</a>
                </td>
                <td />
              </tr>
            </tbody>
          </table>
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <p class="text--center">
            <strong>Directors' report period ended <ix:nonNumeric contextRef="CY_END" format="ixt2:datedaymonthyearen" name="uk-bus:BalanceSheetDate">31 December 2021</ix:nonNumeric>
            </strong>
          </p>
          <p> The directors present their report with the financial statements of the company for the period ended 31 December 2021 </p>
          <div>
            <p class="strong">Principal activities of the company</p>
            <p>
              <ix:nonNumeric contextRef="CY" name="uk-bus:DescriptionPrincipalActivities">Cleaning</ix:nonNumeric>
            </p>
            <br />
            <br />
          </div>
          <p>
            <strong>Directors</strong>
          </p>
          <p> The director shown below has held office during the whole of the period from <br />
            <strong> 1 January 2021 to 31 December 2021 </strong>
          </p>
          <br />
          <br />
          <p> The above report has been prepared in accordance with the special provisions in part 15 of the Companies Act 2006 </p>
          <p> This report was approved by the board of directors on <br />
            <strong>
              <ix:nonNumeric contextRef="CY_END" format="ixt2:datedaymonthyearen" name="direp:DateSigningDirectorsReport">1 January 2022</ix:nonNumeric>
            </strong>
            <br />
          </p>
          <p> And signed on behalf of the board by: <br />
            <strong> Name: <ix:nonNumeric contextRef="Director1_CY" name="uk-bus:NameEntityOfficer">mihaela buzatu</ix:nonNumeric>
              <br /> Status: Director </strong>
            <br />
          </p>
          <div class="section-marker" id="DirectorsReportSection" />
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--center">Profit And Loss Account</h2>
          <p class="text--center">
            <strong>for the Period Ended <ix:nonNumeric contextRef="CY_END" format="ixt2:datedaymonthyearen" name="uk-bus:BalanceSheetDate">31 December 2021</ix:nonNumeric>
            </strong>
          </p>
          <table cellspacing="10">
            <thead>
              <tr>
                <th class="table-heading" />
                <th class="table-heading"> 2021 </th>
                <th class="table-heading"> 13 months to 31 December 2020 </th>
              </tr>
              <tr>
                <th class="table-heading">
                  <br />
                </th>
                <th class="table-heading">
                  <br />£
                </th>
                <th class="table-heading">
                  <br />£
                </th>
              </tr>
            </thead>
            <tbody>
              <tr class="figures">
                <td id="turnover-label">Turnover:</td>
                <td class="strong figure" id="turnover-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:TurnoverRevenue" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="turnover-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:TurnoverRevenue" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="cost-of-sales-label">Cost of sales:</td>
                <td class="strong figure" id="cost-of-sales-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:CostSales" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="cost-of-sales-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:CostSales" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="gross-total-label">Gross profit(or loss):</td>
                <td class="strong total" id="gross-total-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:GrossProfitLoss" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="total" id="gross-total-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:GrossProfitLoss" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="distribution-costs-label">Distribution costs:</td>
                <td class="strong figure" id="distribution-costs-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:DistributionCosts" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="distribution-costs-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:DistributionCosts" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="administrative-expenses-label">Administrative expenses:</td>
                <td class="strong figure" id="administrative-expenses-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:AdministrativeExpenses" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="administrative-expenses-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:AdministrativeExpenses" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="other-operating-income-label">Other operating income:</td>
                <td class="strong figure" id="other-operating-income-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherOperatingIncome" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="other-operating-income-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherOperatingIncome" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="operating-total-label">Operating profit(or loss):</td>
                <td class="strong total" id="operating-total-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:OperatingProfitLoss" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="total" id="operating-total-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:OperatingProfitLoss" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="interest-receivable-and-similar-income-label">Interest receivable and similar income:</td>
                <td class="strong figure" id="interest-receivable-and-similar-income-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherInterestReceivableSimilarIncomeFinanceIncome" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="interest-receivable-and-similar-income-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherInterestReceivableSimilarIncomeFinanceIncome" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="interest-payable-and-similar-charges-label">Interest payable and similar charges:</td>
                <td class="strong figure" id="interest-payable-and-similar-charges-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:InterestPayableSimilarChargesFinanceCosts" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="interest-payable-and-similar-charges-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:InterestPayableSimilarChargesFinanceCosts" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="total-profit-or-loss-before-tax-label">Profit(or loss) before tax:</td>
                <td class="strong total" id="total-profit-or-loss-before-tax-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:ProfitLossOnOrdinaryActivitiesBeforeTax" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="total" id="total-profit-or-loss-before-tax-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:ProfitLossOnOrdinaryActivitiesBeforeTax" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="tax-label">Tax:</td>
                <td class="strong figure" id="tax-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:TaxTaxCreditOnProfitOrLossOnOrdinaryActivities" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="tax-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:TaxTaxCreditOnProfitOrLossOnOrdinaryActivities" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="total-profit-or-loss-for-financial-year-label">Profit(or loss) for the financial year:</td>
                <td class="strong total" id="total-profit-or-loss-for-financial-year-curr">
                  <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:ProfitLossOnOrdinaryActivitiesAfterTax" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="total" id="total-profit-or-loss-for-financial-year-prev">
                  <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:ProfitLossOnOrdinaryActivitiesAfterTax" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
            </tbody>
          </table>
          <div class="section-marker" id="ProfitAndLossSection" />
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--center">Balance sheet</h2>
          <p class="text--center">
            <strong>As at <ix:nonNumeric contextRef="CY_END" format="ixt2:datedaymonthyearen" name="uk-bus:BalanceSheetDate">31 December 2021</ix:nonNumeric>
            </strong>
          </p>
          <table cellspacing="10">
            <thead>
              <tr>
                <th class="table-heading" />
                <th class="table-heading">Notes</th>
                <th class="table-heading"> 2021 </th>
                <th class="table-heading"> 13 months to 31 December 2020 </th>
              </tr>
              <tr>
                <th class="table-heading" />
                <th class="table-heading">
                  <br />
                </th>
                <th class="table-heading">
                  <br />£
                </th>
                <th class="table-heading">
                  <br />£
                </th>
              </tr>
            </thead>
            <tbody>
              <tr class="figures">
                <td id="called-up-share-capital-not-paid-label">Called up share capital not paid:</td>
                <td class="figure noteIndex" id="CalledUpShareCapitalNotPaidNotExpressedAsCurrentAsset" />
                <td class="strong text--right" id="called-up-share-capital-not-paid-curr">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CalledUpShareCapitalNotPaidNotExpressedAsCurrentAsset" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="text--right" id="called-up-share-capital-not-paid-prev">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CalledUpShareCapitalNotPaidNotExpressedAsCurrentAsset" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr>
                <th class="strong" id="fixed-assets-heading">Fixed assets</th>
              </tr>
              <tr class="figures">
                <td id="intangible-assets-label">Intangible assets:</td>
                <td class="figure noteIndex" id="uk-busIntangibleAssetsCY_ENDNoteIndexes1"></td>
                <td class="strong figure" id="intangible-curr">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:IntangibleAssets" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="intangible-prev">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:IntangibleAssets" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="tangible-assets-label">Tangible assets:</td>
                <td class="figure noteIndex" id="uk-busPropertyPlantEquipmentCY_ENDNoteIndexes">3</td>
                <td class="strong figure" id="tangible-curr">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="text--right" id="tangible-prev">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="fixed-assets-investments-label">Investments:</td>
                <td class="figure noteIndex" id="uk-busInvestmentsFixedAssetsCY_ENDNoteIndexes1"></td>
                <td class="strong figure" id="fixed-investments-curr">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:InvestmentsFixedAssets" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="fixed-investments-prev">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:InvestmentsFixedAssets" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="total-fixed-assets-label">Total fixed assets:</td>
                <td class="figure noteIndex" id="uk-busFixedAssetsCY_ENDNoteIndexes" />
                <td class="strong total" id="fixed-assets-curr-total">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:FixedAssets" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="total" id="fixed-assets-prev-total">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:FixedAssets" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr>
                <th class="strong" id="current-assets-heading">Current assets</th>
              </tr>
              <tr class="figures">
                <td id="stocks-label">Stocks:</td>
                <td class="figure noteIndex" id="uk-busTotalInventoriesCY_ENDNoteIndexes">4</td>
                <td class="strong figure" id="stocks-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalInventories" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="figure" id="stocks-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalInventories" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="debtors-label">Debtors:</td>
                <td class="figure noteIndex"></td>
                <td class="strong figure" id="debtors-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Debtors" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="debtors-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Debtors" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="cash-at-bank-and-in-hand-label">Cash at bank and in hand:</td>
                <td class="figure noteIndex" id="uk-busCashBankOnHandCY_ENDNoteIndexes" />
                <td class="strong figure" id="cash-at-bank-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CashBankOnHand" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="cash-at-bank-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CashBankOnHand" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="current-assets-investments-label">Investments:</td>
                <td class="figure noteIndex" id="uk-busCurrentAssetInvestmentsCY_ENDNoteIndexes1"></td>
                <td class="strong figure" id="investments-curr">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CurrentAssetInvestments" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="text--right" id="investments-prev">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CurrentAssetInvestments" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="current-assets-label">Total current assets:</td>
                <td class="figure noteIndex" id="uk-busCurrentAssetsCY_ENDNoteIndexes" />
                <td class="strong total" id="current-assets-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CurrentAssets" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="total" id="current-assets-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:CurrentAssets" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="prepayments-and-accrued-income-label">Prepayments and accrued income:</td>
                <td class="figure noteIndex" id="uk-busPrepaymentsAccruedIncomeNotExpressedWithinCurrentAssetSubtotalCY_ENDNoteIndexes" />
                <td class="strong figure" id="prepayments-and-accrued-income-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PrepaymentsAccruedIncomeNotExpressedWithinCurrentAssetSubtotal" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="prepayments-and-accrued-income-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PrepaymentsAccruedIncomeNotExpressedWithinCurrentAssetSubtotal" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="creditors-within-label">Creditors: amounts falling due within one year:</td>
                <td class="figure noteIndex"></td>
                <td class="strong figure" id="creditors-within-curr-val">
                  <ix:nonFraction contextRef="CreditorsWithinOneYear_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Creditors" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="creditors-within-prev-val">
                  <ix:nonFraction contextRef="CreditorsWithinOneYear_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Creditors" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="net-current-assets-label">Net current assets (liabilities):</td>
                <td class="figure noteIndex" id="uk-busNetCurrentAssetsLiabilitiesCY_ENDNoteIndexes" />
                <td class="strong total" id="net-current-assets-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:NetCurrentAssetsLiabilities" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="total" id="net-current-assets-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:NetCurrentAssetsLiabilities" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="total-assets-label">Total assets less current liabilities:</td>
                <td class="figure noteIndex" id="uk-busTotalAssetsLessCurrentLiabilitiesCY_ENDNoteIndexes" />
                <td class="strong total" id="total-assets-less-current-liabilities-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAssetsLessCurrentLiabilities" unitRef="GBP">3</ix:nonFraction>
                </td>
                <td class="total" id="total-assets-less-current-liabilities-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAssetsLessCurrentLiabilities" unitRef="GBP">3</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="creditors-after-label">Creditors: amounts falling due after more than one year:</td>
                <td class="figure noteIndex"></td>
                <td class="strong figure" id="creditors-after-curr-val">
                  <ix:nonFraction contextRef="CreditorsAfterOneYear_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Creditors" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="creditors-after-prev-val">
                  <ix:nonFraction contextRef="CreditorsAfterOneYear_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Creditors" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="provision-for-liabilities-label">Provision for liabilities:</td>
                <td class="figure noteIndex" id="uk-busProvisionsForLiabilitiesBalanceSheetSubtotalCY_ENDNoteIndexes" />
                <td class="strong figure" id="provision-curr-val"> ( <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:ProvisionsForLiabilitiesBalanceSheetSubtotal" unitRef="GBP">1</ix:nonFraction> ) </td>
                <td class="figure" id="provision-prev-val"> ( <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:ProvisionsForLiabilitiesBalanceSheetSubtotal" unitRef="GBP">1</ix:nonFraction> ) </td>
              </tr>
              <tr class="figures">
                <td id="accruals-and-deferred-income-label">Accruals and deferred income:</td>
                <td class="figure noteIndex" id="uk-busAccruedLiabilitiesNotExpressedWithinCreditorsSubtotalCY_ENDNoteIndexes" />
                <td class="strong figure" id="accruals-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccruedLiabilitiesNotExpressedWithinCreditorsSubtotal" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="accruals-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccruedLiabilitiesNotExpressedWithinCreditorsSubtotal" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="total-net-assets-label">Total net assets (liabilities):</td>
                <td class="figure noteIndex" id="uk-busNetAssetsLiabilitiesCY_ENDNoteIndexes" />
                <td class="strong total" id="total-net-assets-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:NetAssetsLiabilities" unitRef="GBP">2</ix:nonFraction>
                </td>
                <td class="total" id="total-net-assets-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:NetAssetsLiabilities" unitRef="GBP">2</ix:nonFraction>
                </td>
              </tr>
              <tr>
                <th class="strong" id="capital-and-reserve-heading">Capital and reserves</th>
              </tr>
              <tr class="figures">
                <td id="called-up-share-capital-label">Called up share capital:</td>
                <td class="figure noteIndex" id="uk-busEquityShareCapital_CY_ENDNoteIndexes" />
                <td class="strong figure" id="called-up-share-capital-curr-val">
                  <ix:nonFraction contextRef="ShareCapital_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="figure" id="called-up-share-capital-prev-val">
                  <ix:nonFraction contextRef="ShareCapital_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="share-premium-account-label">Share premium account:</td>
                <td class="figure noteIndex" id="uk-busEquitySharePremiumAccount_CY_ENDNoteIndexes" />
                <td class="strong figure" id="share-premium-account-curr-val">
                  <ix:nonFraction contextRef="SharePremiumAccount_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">1</ix:nonFraction>
                </td>
                <td class="figure" id="share-premium-account-prev-val">
                  <ix:nonFraction contextRef="SharePremiumAccount_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">1</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="other-reserves-label">Other reserves:</td>
                <td class="figure noteIndex" id="uk-busEquityOtherReserves_CY_ENDNoteIndexes" />
                <td class="strong figure" id="other-reserves-curr-val">
                  <ix:nonFraction contextRef="OtherReserves_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="other-reserves-prev-val">
                  <ix:nonFraction contextRef="OtherReserves_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td id="profit-and-loss-label">Profit and loss account:</td>
                <td class="figure noteIndex" id="uk-busEquityRetainedEarningsAccumulatedLosses_CY_ENDNoteIndexes" />
                <td class="strong figure" id="profit-and-loss-curr-val">
                  <ix:nonFraction contextRef="RetainedEarningsAccumulatedLosses_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">0</ix:nonFraction>
                </td>
                <td class="figure" id="profit-and-loss-prev-val">
                  <ix:nonFraction contextRef="RetainedEarningsAccumulatedLosses_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">0</ix:nonFraction>
                </td>
              </tr>
              <tr class="figures">
                <td class="strong" id="shareholders-fund-label">Total Shareholders' funds:</td>
                <td class="figure noteIndex" id="uk-busEquityCY_ENDNoteIndexes" />
                <td class="strong total" id="shareholders-fund-curr-val">
                  <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">2</ix:nonFraction>
                </td>
                <td class="total" id="shareholders-fund-prev-val">
                  <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:Equity" unitRef="GBP">2</ix:nonFraction>
                </td>
              </tr>
            </tbody>
          </table>
          <p class="text--center">The notes form part of these financial statements</p>
          <div class="section-marker" id="BalanceSheetSection" />
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--left">Balance sheet statements</h2>
          <p>
            <ix:nonNumeric contextRef="CY" name="direp:StatementThatCompanyEntitledToExemptionFromAuditUnderSection477CompaniesAct2006RelatingToSmallCompanies">For the year ending 31 December 2021 the company was entitled to exemption under section 477 of the Companies Act 2006 relating to small companies.</ix:nonNumeric>
          </p>
          <p>
            <ix:nonNumeric contextRef="CY" name="direp:StatementThatMembersHaveNotRequiredCompanyToObtainAnAudit">The members have not required the company to obtain an audit in accordance with section 476 of the Companies Act 2006.</ix:nonNumeric>
          </p>
          <p>
            <ix:nonNumeric contextRef="CY" name="direp:StatementThatDirectorsAcknowledgeTheirResponsibilitiesUnderCompaniesAct">The directors acknowledge their responsibilities for complying with the requirements of the Act with respect to accounting records and the preparation of accounts.</ix:nonNumeric>
          </p>
          <p>
            <ix:nonNumeric contextRef="CY" name="direp:StatementThatAccountsHaveBeenPreparedInAccordanceWithProvisionsSmallCompaniesRegime">These accounts have been prepared and delivered in accordance with the provisions applicable to companies subject to the small companies regime.</ix:nonNumeric>
          </p>
          <div>
            <p class="strong"> This report was approved by the board of directors on <ix:nonNumeric contextRef="CY_END" format="ixt2:datedaymonthyearen" name="core:DateAuthorisationFinancialStatementsForIssue">14 October 2022</ix:nonNumeric>
              <br /> and signed on behalf of the board by:
            </p>
            <p> Name: <ix:nonNumeric contextRef="Director1_CY" name="uk-bus:NameEntityOfficer">mihaela buzatu</ix:nonNumeric>
              <br /> Status: Director
            </p>
          </div>
          <p class="text--center">The notes form part of these financial statements</p>
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--center">Notes to the Financial Statements</h2>
          <p class="text--center">
            <strong>for the Period Ended 31 December 2021</strong>
          </p>
          <ul>
            <li>
              <h2>1. Accounting policies </h2>
              <p class="strong">Basis of measurement and preparation</p>
              <div class="text-area-display" id="basis-of-measurement-and-preparation-text-note">
                <p class="text-area-display">
                  <ix:nonNumeric contextRef="CY" name="core:GeneralDescriptionBasisMeasurementUsedInPreparingFinancialStatements">These financial statements have been prepared in accordance with the provisions of Financial Reporting Standard 101</ix:nonNumeric>
                </p>
              </div>
            </li>
          </ul>
          <div class="section-marker" id="AdditionalNotesSection" />
        </div>
        <div class="page">
          <div class="header">
            <h1 class="text--center">
              <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
            </h1>
          </div>
          <h2 class="text--center">Notes to the Financial Statements</h2>
          <p class="text--center">
            <strong>for the Period Ended 31 December 2021</strong>
          </p>
          <ul>
            <li>
              <h2>2. Employees </h2>
              <table>
                <tbody>
                  <tr>
                    <th class="table-heading" />
                    <th class="table-heading" id="employees-note-current-heading">2021</th>
                    <th class="table-heading" id="employees-note-previous-heading">13 months to 31 December 2020</th>
                  </tr>
                  <tr class="figures">
                    <td id="employeesNote-label">Average number of employees during the period</td>
                    <td class="strong figure" id="employeesNote-curr-val">
                      <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:AverageNumberEmployeesDuringPeriod" unitRef="pure">1</ix:nonFraction>
                    </td>
                    <td class="figure" id="employeesNote-prev-val">
                      <ix:nonFraction contextRef="PY" decimals="0" format="ixt2:numdotdecimal" name="core:AverageNumberEmployeesDuringPeriod" unitRef="pure">1</ix:nonFraction>
                    </td>
                  </tr>
                </tbody>
              </table>
            </li>
          </ul>
        </div>
        <div id="balance-sheet-notes-section">
          <div class="section-marker" id="BalanceSheetNotesSection" />
          <div class="page">
            <div class="header">
              <h1 class="text--center">
                <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
              </h1>
            </div>
            <h2 class="text--center">Notes to the Financial Statements</h2>
            <p class="text--center">
              <strong>for the Period Ended 31 December 2021</strong>
            </p>
            <h2>3. Tangible assets</h2>
            <table class="wrap">
              <thead>
                <tr>
                  <th class="text--right figure" />
                  <th class="text--right figure">Land &amp; buildings</th>
                  <th class="text--right figure">Plant &amp; machinery</th>
                  <th class="text--right figure">Fixtures &amp; fittings</th>
                  <th class="text--right figure">Office equipment</th>
                  <th class="text--right figure">Motor vehicles</th>
                  <th class="text--right figure">Total</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <th>Cost</th>
                  <td class="table-heading">£</td>
                  <td class="table-heading">£</td>
                  <td class="table-heading">£</td>
                  <td class="table-heading">£</td>
                  <td class="table-heading">£</td>
                  <td class="table-heading">£</td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-at-period-start">At 1 January 2021</td>
                  <td class="strong figure" id="tangible-cost-at-period-start-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-at-period-start-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-at-period-start-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-at-period-start-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-at-period-start-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-at-period-start-total">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-additions">Additions</td>
                  <td class="strong figure" id="tangible-cost-additions-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-additions-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-additions-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-additions-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-additions-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-additions-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalAdditionsIncludingFromBusinessCombinationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-disposals">Disposals</td>
                  <td class="strong figure" id="tangible-cost-disposals-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-disposals-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-disposals-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-disposals-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-disposals-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-disposals-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-revaluations">Revaluations</td>
                  <td class="strong figure" id="tangible-cost-revaluations-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-revaluations-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-revaluations-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-revaluations-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-revaluations-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-revaluations-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:TotalIncreaseDecreaseFromRevaluationsPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-transfers">Transfers</td>
                  <td class="strong figure" id="tangible-cost-transfers-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-transfers-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-transfers-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-transfers-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-transfers-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-cost-transfers-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseDecreaseDueToTransfersBetweenClassesPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-cost-at-period-end">At 31 December 2021</td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-cost-at-period-end-total">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipmentGrossCost" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
                <tr>
                  <th>Depreciation</th>
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                </tr>
                <tr class="figures">
                  <td id="tangible-depreciation-at-period-start">At 1 January 2021</td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-at-period-start-total">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-depreciation-charge">Charge for year</td>
                  <td class="strong figure" id="tangible-depreciation-charge-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-charge-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-charge-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-charge-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-charge-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-charge-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:IncreaseFromDepreciationChargeForYearPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-depreciation-on-disposals">On disposals</td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-on-disposals-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:DisposalsDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-depreciation-other-adjustments">Other adjustments</td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                  <td class="strong figure" id="tangible-depreciation-other-adjustments-total">
                    <ix:nonFraction contextRef="CY" decimals="0" format="ixt2:numdotdecimal" name="core:OtherIncreaseDecreaseInDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP"> 0 </ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-depreciation-at-period-end">At 31 December 2021</td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-depreciation-at-period-end-total">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:AccumulatedDepreciationImpairmentPropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                </tr>
                <tr>
                  <th>Net book value</th>
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                  <td class="text--center" />
                </tr>
                <tr class="figures">
                  <td id="tangible-net-book-value-current-period">At 31 December 2021</td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-current-period-total">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="tangible-net-book-value-previous_period">At 31 December 2020</td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-land-and-building">
                    <ix:nonFraction contextRef="LandAndBuildings_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-plant-and-machinery">
                    <ix:nonFraction contextRef="PlantMachinery_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-fixtures-and-fitting">
                    <ix:nonFraction contextRef="FurnitureFittingsToolsEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-office-equipment">
                    <ix:nonFraction contextRef="OfficeEquipment_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-motor-vehicles">
                    <ix:nonFraction contextRef="Vehicles_PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="strong grandtotal" id="tangible-net-book-value-previous_period-total">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PropertyPlantEquipment" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
              </tbody>
            </table>
            <div class="text-area-display">
              <p class="text-area-display">
                <ix:nonNumeric contextRef="CY" name="core:PropertyPlantEquipmentFree-textComment" />
              </p>
            </div>
          </div>
          <div class="page">
            <div class="header">
              <h1 class="text--center">
                <ix:nonNumeric contextRef="CY" name="uk-bus:EntityCurrentLegalOrRegisteredName">QUICK CLEANING PROFESIONAL LIMITED</ix:nonNumeric>
              </h1>
            </div>
            <h2 class="text--center">Notes to the Financial Statements</h2>
            <p class="text--center">
              <strong>for the Period Ended 31 December 2021</strong>
            </p>
            <h2>4. Stocks</h2>
            <table cellspacing="10" id="stocks-note-table">
              <tbody>
                <tr>
                  <th class="table-heading" />
                  <th class="table-heading" id="stocks-note-current-heading">2021</th>
                  <th class="table-heading" id="stocks-note-previous-heading">13 months to 31 December 2020</th>
                </tr>
                <tr>
                  <th class="table-heading" />
                  <th class="table-heading" id="stocks-note-current-currency">£</th>
                  <th class="table-heading" id="stocks-note-previous-currency">£</th>
                </tr>
                <tr class="figures">
                  <td id="stocks">Stocks</td>
                  <td class="strong figure" id="stocks-note-curr-val">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:OtherInventories" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="figure" id="stocks-note-prev-val">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:OtherInventories" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="payments-on-account-label">Payments on account</td>
                  <td class="strong figure" id="payments-on-account-curr-val">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PaymentsOnAccountInventories" unitRef="GBP">0</ix:nonFraction>
                  </td>
                  <td class="figure" id="payments-on-account-prev-val">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:PaymentsOnAccountInventories" unitRef="GBP">0</ix:nonFraction>
                  </td>
                </tr>
                <tr class="figures">
                  <td id="stocks-total-label">Total</td>
                  <td class="strong total" id="stocks-total-curr-val">
                    <ix:nonFraction contextRef="CY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalInventories" unitRef="GBP">1</ix:nonFraction>
                  </td>
                  <td class="total" id="stocks-total-prev-val">
                    <ix:nonFraction contextRef="PY_END" decimals="0" format="ixt2:numdotdecimal" name="core:TotalInventories" unitRef="GBP">1</ix:nonFraction>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
